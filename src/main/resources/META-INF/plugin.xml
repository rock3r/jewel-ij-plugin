<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
    <id>org.jetbrains.jewel.plugin</id>
    <name>Jewel</name>
    <vendor url="https://github.com/JetBrains/Jewel">JetBrains</vendor>
    <description><![CDATA[
  Adds support for building Compose for Desktop/Jewel UI on the JVM via the <a href="https://developer.android.com/jetpack/compose">Jetpack Compose</a> toolkit.


  <p><a href="https://github.com/JetBrains/jewel">Jewel</a></p>
  <p><a href="https://developer.android.com/studio">Android Studio</a></p>
]]></description>
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.java</depends>
    <depends>org.jetbrains.kotlin</depends>
    <depends optional="true" config-file="plugin.android.xml">org.jetbrains.android</depends>

    <incompatible-with>org.jetbrains.compose.desktop.ide</incompatible-with>

    <resource-bundle>messages.ComposeBundle</resource-bundle>

    <extensions defaultExtensionNs="com.intellij">
        <dependencySupport coordinate="org.jetbrains.compose.foundation:foundation-desktop" kind="java"
                           displayName="Compose for Desktop"/>

        <annotator language="kotlin"
                   implementationClass="com.android.tools.compose.code.state.ComposeStateReadAnnotator"/>

        <additionalTextAttributes scheme="Default" file="colorschemes/ComposeColorSchemeDefault.xml"/>
        <additionalTextAttributes scheme="Darcula" file="colorschemes/ComposeColorSchemeDarcula.xml"/>

        <colorSettingsPage implementation="com.android.tools.compose.ComposeColorSettingsPage"/>

        <intentionAction>
            <language>kotlin</language>
            <className>com.android.tools.compose.intentions.ComposeSurroundWithWidgetActionGroup</className>
            <category>Jewel for Compose</category>
        </intentionAction>

        <intentionAction>
            <language>kotlin</language>
            <className>com.android.tools.compose.intentions.ComposeWrapModifiersAction</className>
            <category>Jewel for Compose</category>
        </intentionAction>

        <intentionAction>
            <language>kotlin</language>
            <className>com.android.tools.compose.intentions.ComposeUnwrapAction</className>
            <category>Jewel for Compose</category>
        </intentionAction>

        <lang.foldingBuilder language="kotlin" implementationClass="com.android.tools.compose.ComposeFoldingBuilder"/>

        <defaultLiveTemplates file="templates/JewelCompose.xml"/>
        <defaultLiveTemplates file="templates/JewelComposePreview.xml"/>

        <codeCompletionConfigurable instance="com.android.tools.compose.ComposeCodeCompletionConfigurable"/>
        <codeStyleSettingsProvider implementation="com.android.tools.compose.settings.ComposeFormattingCodeStyleSettingsProvider"/>

        <completion.contributor language="kotlin"
                                id="ComposeCompletionContributor"
                                implementationClass="com.android.tools.compose.code.completion.ComposeCompletionContributor"
                                order="first, before KotlinCompletionContributor, before kind_executor"/>

        <completion.contributor language="kotlin"
                                id="ComposeAlignmentCompletionContributor"
                                implementationClass="com.android.tools.compose.code.completion.ComposePositioningCompletionContributor"
                                order="first, before KotlinCompletionContributor"/>

        <completion.contributor language="kotlin"
                                implementationClass="com.android.tools.compose.code.completion.ComposeModifierCompletionContributor"
                                order="first, before ComposeCompletionContributor"/>

        <weigher key="completion"
                 implementationClass="com.android.tools.compose.code.completion.ComposeCompletionWeigher"
                 id="android.compose"
                 order="first"/>

        <weigher key="completion"
                 implementationClass="com.android.tools.compose.code.completion.ComposePositioningCompletionWeigher"
                 id="ComposePositioningCompletionWeigher"
                 order="first"/>

        <weigher key="proximity"
                 implementationClass="com.android.tools.compose.code.actions.ComposeProximityWeigher"
                 id="composeProximityWeigher"
                 order="before javaInheritance" />

        <lang.inspectionSuppressor language="kotlin" implementationClass="com.android.tools.compose.ComposeSuppressor"/>

        <postFormatProcessor implementation="com.android.tools.compose.formatting.ComposePostFormatProcessor"/>

        <automaticRenamerFactory implementation="com.android.tools.compose.ComposableElementAutomaticRenamerFactory"/>

        <debugger.positionManagerFactory
                implementation="com.android.tools.compose.debug.ComposePositionManagerFactory"/>
        <debugger.kotlinStackFrameValueContributor
                implementation="com.android.tools.compose.debug.recomposition.ComposeValueContributor"/>
        <debuggerClassFilterProvider
                implementation="com.android.tools.compose.debug.ComposeDebuggerClassesFilterProvider"/>
        <xdebugger.breakpointType implementation="com.android.tools.compose.debug.ComposeFunctionBreakpointType"/>
        <xdebugger.settings implementation="com.android.tools.compose.debug.ComposeDebuggerSettings"/>
        <debugger.javaBreakpointHandlerFactory
                implementation="com.android.tools.compose.debug.ComposeFunctionBreakpointHandlerFactory"/>
        <debugger.compoundRendererProvider id="SnapshotMutableStateImplRenderer"
                                           implementation="com.android.tools.compose.debug.render.SnapshotMutableStateImplRendererProvider"
                                           order="first"/>

        <debugger.compoundRendererProvider id="DerivedSnapshotStateRenderer"
                                           implementation="com.android.tools.compose.debug.render.DerivedSnapshotStateRendererProvider"
                                           order="first"/>

        <debugger.compoundRendererProvider id="ComposeStateObjectListRenderer"
                                           implementation="com.android.tools.compose.debug.render.ComposeStateObjectListRendererProvider"
                                           order="first"/>

        <debugger.compoundRendererProvider id="ComposeStateObjectMapRenderer"
                                           implementation="com.android.tools.compose.debug.render.ComposeStateObjectMapRendererProvider"
                                           order="first"/>

        <debugger.compoundRendererProvider id="KotlinMapEntryRenderer"
                                           implementation="com.android.tools.compose.debug.render.KotlinMapEntryRenderer"
                                           order="first"/>

        <itemPresentationProvider
                forClass="org.jetbrains.kotlin.psi.KtFunction"
                implementationClass="com.android.tools.compose.ComposableItemPresentationProvider"
                order="first"
        />

        <iconProvider implementation="com.android.tools.compose.ComposableIconProvider" order="first"/>

        <registryKey key="jewel.compose.debugger.recomposition.node"
                     description="Add a node to the debugger view of a composable function that describes why the function is being recomposed"
                     defaultValue="true"
                     restartRequired="false"/>

        <registryKey key="jewel.compose.state.read.inlay.hints.enabled"
                     description="Enable inlay hints for State reads in @Composable functions. If enabled, calls out reads of variables of type State inside @Composable functions."
                     defaultValue="true"
                     restartRequired="false"/>

        <overrideImplementsAnnotationsFilter id="ComposeOverrideImplementsAnnotationsFilter"
                                             implementation="com.android.tools.compose.ComposeOverrideImplementsAnnotationsFilter"/>

        <codeInsight.lineMarkerProvider language="kotlin"
                                        implementationClass="com.android.tools.compose.code.ComposeLineMarkerProviderDescriptor"/>
        <codeInsight.lineMarkerProvider language="kotlin"
                                        implementationClass="com.android.tools.compose.ComposeColorLineMarkerProviderDescriptor"/>

        <usageGroupingRuleProvider implementation="com.android.tools.compose.ComposeUsageGroupingRuleProvider" />

        <codeInsight.declarativeInlayProvider language="kotlin"
                                              implementationClass="com.android.tools.compose.code.state.ComposeStateReadInlayHintsProvider"
                                              isEnabledByDefault="false"
                                              group="OTHER_GROUP"
                                              providerId="compose.state.read"
                                              bundle="messages.ComposeBundle"
                                              nameKey="state.read.inlay.provider.name"
                                              descriptionKey="state.read.inlay.provider.description"/>
        <codeInsight.inlayActionHandler
                implementationClass="com.android.tools.compose.code.state.ComposeStateReadInlayActionHandler"
                handlerId="compose.state.read"/>
    </extensions>

    <projectListeners>
        <listener class="com.android.tools.compose.ComposeAutoDocumentation$MyLookupManagerListener"
                  topic="com.intellij.codeInsight.lookup.LookupManagerListener"
                  activeInHeadlessMode="false"/>
    </projectListeners>

    <extensions defaultExtensionNs="org.jetbrains.kotlin.extensions.internal">
        <typeResolutionInterceptorExtension
                implementation="androidx.compose.compiler.plugins.kotlin.k1.ComposeTypeResolutionInterceptorExtension"/>
    </extensions>

    <!-- Note: we don't get conditional includes in Gradle-built plugins, so we're leaving everything in here -->
    <xi:include href="plugin.k1.xml"/>
    <xi:include href="plugin.k2.xml"/>

    <!-- ========================= JEWEL CUSTOM CODE BELOW =============================== -->

    <extensions defaultExtensionNs="org.jetbrains.kotlin">
        <supportsKotlinPluginMode supportsK2="true"/>
    </extensions>

    <extensionPoints>
        <extensionPoint dynamic="true"
                        qualifiedName="org.jetbrains.jewel.projectInfoProvider"
                        interface="org.jetbrains.jewel.ijplugin.ProjectInfoProvider"/>
    </extensionPoints>

    <extensions defaultExtensionNs="org.jetbrains.jewel">
        <projectInfoProvider implementation="org.jetbrains.jewel.ijplugin.NonAndroidProjectInfoProvider" order="last"/>
    </extensions>
</idea-plugin>
