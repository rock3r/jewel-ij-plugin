<idea-plugin>
    <id>org.jetbrains.jewel.plugin</id>
    <name>Jewel</name>
    <vendor>JetBrains</vendor>
    <description><![CDATA[
  Adds support for building Compose for Desktop/Jewel UI on the JVM via the <a href="https://developer.android.com/jetpack/compose">Jetpack Compose</a> toolkit.

  <p><a href="https://github.com/JetBrains/jewel">Jewel</a></p>
  <p><a href="https://developer.android.com/studio">Android Studio</a></p>
]]></description>
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.java</depends>
    <depends>org.jetbrains.kotlin</depends>

    <resource-bundle>messages.ComposeBundle</resource-bundle>

    <extensions defaultExtensionNs="com.intellij">
        <dependencySupport coordinate="org.jetbrains.compose.foundation:foundation-desktop" kind="java"
                           displayName="Compose for Desktop"/>

        <annotator language="kotlin"
                   implementationClass="com.android.tools.compose.code.state.ComposeStateReadAnnotator"/>

        <debugger.positionManagerFactory
                implementation="com.android.tools.compose.debug.ComposePositionManagerFactory"/>
        <debugger.kotlinStackFrameValueContributor
                implementation="com.android.tools.compose.debug.recomposition.ComposeValueContributor"/>
        <debuggerClassFilterProvider
                implementation="com.android.tools.compose.debug.ComposeDebuggerClassesFilterProvider"/>
        <xdebugger.breakpointType implementation="com.android.tools.compose.debug.ComposeFunctionBreakpointType"/>
        <xdebugger.settings implementation="com.android.tools.compose.debug.ComposeDebuggerSettings"/>
        <debugger.javaBreakpointHandlerFactory
                implementation="com.android.tools.compose.debug.ComposeFunctionBreakpointHandlerFactory"/>
        <debugger.compoundRendererProvider id="SnapshotMutableStateImplRenderer"
                                           implementation="com.android.tools.compose.debug.render.SnapshotMutableStateImplRendererProvider"
                                           order="first"/>

        <debugger.compoundRendererProvider id="DerivedSnapshotStateRenderer"
                                           implementation="com.android.tools.compose.debug.render.DerivedSnapshotStateRendererProvider"
                                           order="first"/>

        <debugger.compoundRendererProvider id="ComposeStateObjectListRenderer"
                                           implementation="com.android.tools.compose.debug.render.ComposeStateObjectListRendererProvider"
                                           order="first"/>

        <debugger.compoundRendererProvider id="ComposeStateObjectMapRenderer"
                                           implementation="com.android.tools.compose.debug.render.ComposeStateObjectMapRendererProvider"
                                           order="first"/>

        <debugger.compoundRendererProvider id="KotlinMapEntryRenderer"
                                           implementation="com.android.tools.compose.debug.render.KotlinMapEntryRenderer"
                                           order="first"/>

        <registryKey key="jewel.compose.debugger.recomposition.node"
                     description="Add a node to the debugger view of a composable function that describes why the function is being recomposed"
                     defaultValue="true"
                     restartRequired="false"/>

        <registryKey key="jewel.compose.state.read.inlay.hints.enabled"
                     description="Enable inlay hints for State reads in @Composable functions. If enabled, calls out reads of variables of type State inside @Composable functions."
                     defaultValue="true"
                     restartRequired="false"/>

        <codeInsight.declarativeInlayProvider language="kotlin"
                                              implementationClass="com.android.tools.compose.code.state.ComposeStateReadInlayHintsProvider"
                                              isEnabledByDefault="false"
                                              group="OTHER_GROUP"
                                              providerId="compose.state.read"
                                              bundle="messages.ComposeBundle"
                                              nameKey="state.read.inlay.provider.name"
                                              descriptionKey="state.read.inlay.provider.description"/>
    </extensions>

    <extensions defaultExtensionNs="org.jetbrains.kotlin">
        <supportsKotlinPluginMode supportsK2="true"/>
    </extensions>

    <extensions defaultExtensionNs="org.jetbrains.kotlin.extensions.internal">
        <typeResolutionInterceptorExtension
                implementation="androidx.compose.compiler.plugins.kotlin.k1.ComposeTypeResolutionInterceptorExtension"/>
    </extensions>
</idea-plugin>
